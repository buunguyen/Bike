load 'unit.bk';

BikeUnit.Batch.create( 'Array :: Basic' ).run( func() {
	var target = [ 2, 3, 1, 0, 4 ];
	this.should_be_equal( target.to_string(), '[ 2, 3, 1, 0, 4 ]' );
	this.should_not_be_null( target.hash_code() );
	this.should_be_equal( target, [ 2, 3, 1, 0, 4 ] );
	this.should_be_equal( [], [] );
	this.should_not_be_equal( target, [ 2, 3, 1, 0, 300 ] );
	this.should_be_equal( target.size(), 5 );
	this.should_be_equal( [].size(), 0 );
} );

BikeUnit.Batch.create( 'Array :: Printable' ).run( func() {
	var target = [ func f( a, *b ){}, [ 1, 2, 3 ], 'a', 1 ];
	this.should_be_equal( target.printable(), [ 'f( a, *b )', '[ 1, 2, 3 ]', 'a', 1 ] );
} );

BikeUnit.Batch.create( 'Array :: Members' ).run( func() {
	var target = [ 2, 3, 1, 0, 4 ];
	
	this.should_be_false( target.has() );
	this.should_be_true( target.has( 3 ) );
	this.should_be_false( target.has( 5 ) );
	
	target.add( 5 );
	this.should_be_true( target.has( 5 ) );
	
	target.remove( 5 );
	this.should_be_false( target.has( 5 ) );
	
	this.should_throw( func() { target.remove_at(); } , Bike.ArgumentNullError );
	target.remove_at( 0 );
	this.should_be_false( target.has( 2 ) );
	this.should_be_equal( target[ 0 ], 3 );
	
	this.should_throw( func() { target.add_all(); } , Bike.ArgumentNullError );
	target.add_all( [ 1, 5 ] );
	this.should_be_true( target.has( 1 ) );
	this.should_be_true( target.has( 5 ) );
} );

BikeUnit.Batch.create( 'Array :: Batch' ).run( func() {
	var target = [ 1, 2, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 7, 8, 1, 2, 5, 4 ];
	var copy = target.copy();
	this.should_be_equal( target, copy );
	this.should_not_be_same( target, copy );
	
	var distinct = target.distinct();
	this.should_be_equal( distinct.size(), 9 );

	this.should_throw( func() { target.filter(); } , Bike.ArgumentNullError );		
	var filtered = target.filter( func( e ) { e.odd(); } ).distinct();
	this.should_be_equal( filtered, [ 1, 3, 5, 7, 9 ] );
	
	this.should_throw( func() { filtered.any(); } , Bike.ArgumentNullError );
	this.should_throw( func() { filtered.all(); } , Bike.ArgumentNullError );
	this.should_be_true( filtered.all( func( e ) { e.odd(); } ) );
	this.should_be_true( filtered.any( func( e ) { e.odd(); } ) );
	this.should_be_false( filtered.any( func( e ) { e.even(); } ) );
} );

BikeUnit.Batch.create( 'Array :: Sort' ).run( func() {
	var target = [ 2, 3, 1, 0, 4 ];
	var sorted = target.sort();
	this.should_be_equal( sorted, [ 0, 1, 2, 3, 4 ] );
	
	sorted = target.sort( func( a, b ){ -a.compare_to( b );} );
	this.should_be_equal( sorted, [ 4, 3, 2, 1, 0 ] );
} );

BikeUnit.Batch.create( 'Array :: Traverse' ).run( func() {
	var target = [ 2, 3, 1, 0, 4 ];
	var sum = 0;
	
	this.should_throw( func() { target.each(); } , Bike.ArgumentNullError );
	target.each( func( e ) {
		sum += e;
	} );
	this.should_be_equal( sum, 10 );
	
	sum = 0;
	var indices = [];
	this.should_throw( func() { target.each(); } , Bike.ArgumentNullError );
	target.each( func( e, i ) {
		sum += e;
		indices.add( i );
	} );
	this.should_be_equal( sum, 10 );
	this.should_be_equal( indices, [ 0->target.size() ] );
} );

BikeUnit.Batch.create( 'Array :: Map Reduce' ).run( func() {
	var target = [ 2, 0, 4 ];
	
	this.should_throw( func() { target.map(); } , Bike.ArgumentNullError );			

	target = target.map( func( ele ) {ele * ele;} );
	this.should_be_equal( target, [ 4, 0, 16 ] );
	

	this.should_throw( func() { target.reduce(); } , Bike.ArgumentNullError );			
	this.should_throw( func() { target.reduce( 0 ); } , Bike.ArgumentNullError );	
	var value = target.reduce( 0, func( current, ele ) {current + ele;} );
	this.should_be_equal( value, 20 );
	
	value = target.reduce( '', func( current, ele ) {current + ele;} );
	this.should_be_equal( value, '4016' );
} );