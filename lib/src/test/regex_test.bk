load 'regex.bk';
load 'unit.bk';


BikeUnit.Batch.create( 'Bike.Regex :: Invalid parameter calling' ).run( func() {
	var the_text = 'just a normal text';
	this.should_throw( func() { Bike.Regex.is_matched() } , Bike.ArgumentNullError );
	this.should_throw( func() { Bike.Regex.is_matched( the_text ) } , Bike.ArgumentNullError );
	
	this.should_throw( func() { Bike.Regex.replace() } , Bike.ArgumentNullError );
	this.should_throw( func() { Bike.Regex.replace( the_text ) } , Bike.ArgumentNullError );
	this.should_throw( func() { Bike.Regex.replace( the_text , the_text ) } , Bike.ArgumentNullError );
	
	this.should_throw( func() { Bike.Regex.matches() } , Bike.ArgumentNullError );
	this.should_throw( func() { Bike.Regex.matches( the_text ) } , Bike.ArgumentNullError );
} );


BikeUnit.Batch.create( 'Bike.Regex :: is_matched() test' ).run( func() {	
	var evaluating_text = 'However, can you imagine what I felt at that moment?';
	this.should_be_true( Bike.Regex.is_matched( evaluating_text , 'moment\\?$' ) );
	this.should_be_false( Bike.Regex.is_matched( evaluating_text , '^moment\\?' ) );
	this.should_be_true( Bike.Regex.is_matched( evaluating_text , '^However,' ) );
	this.should_be_false( Bike.Regex.is_matched( evaluating_text , 'However,$' ) );
	this.should_be_true( Bike.Regex.is_matched( evaluating_text , 'ima[gin]{3}e' ) );
} );

BikeUnit.Batch.create( 'Bike.Regex :: replace() test' ).run( func() {	
	var evaluating_text = 'For every thousand hacking at the leaves of evil, there is one striking at
the root';
	var result1 = Bike.Regex.replace( evaluating_text , '\\sthousand\\s' , ' single ' );
	this.should_be_equal( result1 , 'For every single hacking at the leaves of evil, there is one striking at
the root' );
	
	var result2 = Bike.Regex.replace( evaluating_text , '\\sevil\\s' , ' good ' );
	this.should_be_equal( result2 , evaluating_text );
	
	var result3 = Bike.Regex.replace( evaluating_text , 'at' , '@' );
	this.should_be_equal( result3 , 'For every thousand hacking @ the leaves of evil, there is one striking @
the root' );
} );


BikeUnit.Batch.create( 'Bike.Regex :: matches() test' ).run( func() {	
	var evaluating_text = 'But what happens when we attempt to shortcut a natural process in our growth and development?';
	var matches1 = Bike.Regex.matches( evaluating_text , 'improvement' );
	var group = null;
	var match = null;
	this.should_be_equal( matches1.size() , 0 );
	
	var matches2 = Bike.Regex.matches( evaluating_text , 'But' );
	this.should_be_equal( matches2.size() , 1 );
	match = matches2[0];
	this.should_be_equal( match.value , 'But' );
	this.should_be_equal( match.index , 0 );
	this.should_be_equal( match.groups.size() , 1 );
	group = match.groups[0];
	this.should_be_equal( group.value , match.value );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
	
	
	var matches3 = Bike.Regex.matches( evaluating_text , 'wh' );
	this.should_be_equal( matches3.size() , 2 );
	match = matches3[0];
	this.should_be_equal( match.value , 'wh' );
	this.should_be_equal( match.index , 4 );
	this.should_be_equal( match.groups.size() , 1 );
	group = match.groups[0];
	this.should_be_equal( group.value , match.value );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
	
	match = matches3[1];
	this.should_be_equal( match.value , 'wh' );
	this.should_be_equal( match.index , 17 );
	this.should_be_equal( match.groups.size() , 1 );
	group = match.groups[0];
	this.should_be_equal( group.value , match.value );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
	
	var matches4 = Bike.Regex.matches( evaluating_text , '([\\w]+)ut' );
	this.should_be_equal( matches4.size() , 2 );
	match = matches4[0];
	this.should_be_equal( match.value , 'But' );
	this.should_be_equal( match.index , 0 );
	this.should_be_equal( match.groups.size() , 2 );
	group = match.groups[0];
	this.should_be_equal( group.value , match.value );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
	group = match.groups[1];
	this.should_be_equal( group.value , 'B' );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
	
	match = matches4[1];
	this.should_be_equal( match.value , 'shortcut' );
	this.should_be_equal( match.index , 36 );
	this.should_be_equal( match.groups.size() , 2 );
	group = match.groups[0];
	this.should_be_equal( group.value , match.value );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
	group = match.groups[1];
	this.should_be_equal( group.value , 'shortc' );
	this.should_be_equal( group.index , match.index );
	this.should_be_true( group.success );
} );
